/* This file is Copyright 2000-2022 Meyer Sound Laboratories Inc.  See the included LICENSE.txt file for details. */

#ifndef DebugTimer_h
#define DebugTimer_h

#include "util/OutputPrinter.h"
#include "util/String.h"
#include "util/TimeUtilityFunctions.h"        // for GetCurrentTime64() and GetRunTime64()
#include "util/TimeUnitConversionFunctions.h" // for MillisToMicros()

#ifndef MUSCLE_DEBUG_TIMER_CLOCK
# if defined(WIN32) || (defined(MUSCLE_USE_LIBRT) && defined(_POSIX_MONOTONIC_CLOCK))
#  define MUSCLE_DEBUG_TIMER_CLOCK GetRunTime64()       /**< Function call that DebugTimer should use to get the current time.  Defaults to GetRunTime64() except under OS's where GetRunTime64() has large granularity; for these platforms GetCurrentTime64() is used instead.  May be overridden at compile-time via -DMUSCLE_DEBUG_TIMER_CLOCK=SomeOtherFunc() */
# else
#  define MUSCLE_DEBUG_TIMER_CLOCK GetCurrentTime64()   /**< Function call that DebugTimer should use to get the current time.  Defaults to GetRunTime64() except under OS's where GetRunTime64() has large granularity; for these platforms GetCurrentTime64() is used instead.  May be overridden at compile-time via -DMUSCLE_DEBUG_TIMER_CLOCK=SomeOtherFunc() */
# endif
#endif

namespace muscle {

/** This is a little class that can be helpful for performance measurement and debugging.
 *  It will measure the amount of time elapsed between when it is constructed and when it
 *  is destroyed, and its destructor will print out the elapsed-time information, if it's considered significant.
 *
 *  If you want to more finely classify how the DebugTimer's lifespan was spent, you can call SetMode()
 *  on this object at various points to assign the elapsed time in different sections to different values.
 *
 *  Time elapsed in each mode will be measured separately and logged separately by the DebugTimer destructor.
 */
class MUSCLE_NODISCARD DebugTimer MUSCLE_FINAL_CLASS
{
public:
   /** Constructor
    *  @param title Title to display in the debug report generated by our constructor.  Defaults to "timer".
    *  @param minLogTime Logging of any timer values less than this value (in microseconds) will be suppressed (so as not to distract you with trivia).  Defaults to MillisToMicros(1) (aka one millisecond)
    *  @param startMode What mode the timer should begin in.  Each mode has its elapsed time recorded separately.  Default is mode zero.
    *  @param p OutputPrinter to use to generate the output text.  Defaults to MUSCLE_LOG_INFO.
    */
   DebugTimer(const String & title = "timer", uint64 minLogTime = MillisToMicros(1), uint8 startMode = 0, const OutputPrinter & p = MUSCLE_LOG_INFO);

   /** Destructor.  Prints out a log message with the elapsed time, in milliseconds, spent in each mode. */
   ~DebugTimer();

   /** Set the timer to record elapsed time to a different mode.
    *  @param newMode the mode we switching our timing mechanism to record elapsed time into.  (mode-numbering is arbitrary and up to the caller)
     */
   void SetMode(uint8 newMode) {SetModeAux(newMode, true);}

   /** Returns the currently active mode number */
   MUSCLE_NODISCARD uint8 GetMode() const {return _currentMode;}

   /** Convenience method:  Equivalent to GetElapsedTime(GetMode()) */
   MUSCLE_NODISCARD uint64 GetElapsedTime() const {return GetElapsedTime(GetMode());}

   /** Returns the amount of elapsed time, in microseconds, that has been spent in the given mode.
    *  Note that if (whichMode) is the currently active mode, the returned value will be growing from moment to moment.
    *  @param whichMode the mode we are querying the elapsed-time for (mode-numbering is arbitrary and up to the caller)
    */
   MUSCLE_NODISCARD uint64 GetElapsedTime(uint8 whichMode) const
   {
      if (((uint16)whichMode) < _numValidModes)
      {
         const uint64 et = _elapsedTimes[whichMode];
         return et + ((whichMode == _currentMode) ? (MUSCLE_DEBUG_TIMER_CLOCK-_curModeStartTime) : 0);
      }
      else return 0;
   }

   /** Set whether or not the destructor should output text.  Default is true.
     * @param e true to enable output from our destructor, or false to disable it
     */
   void SetOutputEnabled(bool e) {_enableOutput = e;}

   /** Returns true iff we are set to output timing info in our destructor, or false if we aren't (as previously set by SetOutputEnabled()) */
   MUSCLE_NODISCARD bool IsOutputEnabled() const {return _enableOutput;}

   /** Set the minimum-log-time value, in microseconds.  Time intervals shorter than this will not be logged.  Defaults value is 1000 (aka one millisecond).
     * @param lt time threshold, in microseconds
     */
   void SetMinLogTime(uint64 lt) {_minLogTime = lt;}

   /** Returns the current minimum-log-time value, in microseconds. */
   MUSCLE_NODISCARD uint64 GetMinLogTime() const {return _minLogTime;}

private:
   void SetModeAux(uint8 newMode, bool updateCurrentModeTimeElapsedFirst);
   void UpdateCurrentModeTimeElapsed(uint64 now) {_elapsedTimes[_currentMode] += (now-_curModeStartTime);}

   enum {NUM_MODES = 256};  // 256 is so any uint8 mode-value will work without bounds-checking

   uint16 _numValidModes;           // How many entries in _elapsedTimes are valid (uint16 because a uint8 couldn't hold 256)
    uint8 _currentMode;
   uint64 _curModeStartTime;        // time at which we entered the current mode

   String _title;
   uint64 _minLogTime;
   OutputPrinter _outputPrinter;
   bool _enableOutput;

   uint64 _elapsedTimes[NUM_MODES]; // time elapsed for each mode, in microseconds
};

/** A macro for quickly declaring a DebugTimer object on the stack.  Usage example:  DECLARE_DEBUGTIMER("hi") */
#define MDECLARE_DEBUGTIMER(...) MDECLARE_ANONYMOUS_STACK_OBJECT(DebugTimer, __VA_ARGS__)

} // end namespace muscle

#endif
